
20.00 ThreadLocal
 第一个threadLocal.get();//get不到，走初始化setInitialValue，输出 jett老师
第二个String value2 = threadLocal.get();//可以get到，获取到set的内容 输出大卫老师
说明新Thread 如果没有调threadLocal.set 的话，当get的时候默认会调用到setInitialValue，也就是looper 的theadLoacl
39.45 app启动 ActivityThread分析
 app启动时，ActivityThread 里main方法里Looper.prepareMainLooper() 里 prepare() 里 
sThreadLocal.set(new Looper(quitAllowed));创建了全局唯一主线程looper对象
45.30 handler源码
 在主线程创建handler的时候通过Looper.myLooper()方法下的sThreadLocal.get() 拿到looper对象，
因为是在主线程，所以能拿到全局唯一的looper对象。mQueue = mLooper.mQueue; 获得消息队列
46.50 发送消息
 sendMessage 里sendMessageAtTime 里enqueueMessage 里msg.target的target发现是handler，
enqueueMessage 里返回的queue.enqueueMessage 里发现mMessages = msg;  把传入的msg赋值给全局变量
50.20 消息处理
 ActivityThread 类中main 底部Looper.loop()里 Looper me = myLooper()拿到全局唯一looper对象，
然后到loopOnce 里Message msg = me.mQueue.next(); 拿消息，然后通过msg.target.dispatchMessage(msg);  返回消息
dispatchMessage里 handleMessage 里是空的，就是重写的Handler的handleMessage
55.50 阻塞的实现
 MessageQueue 类里Message next() 里nativePollOnce(ptr, nextPollTimeoutMillis);
在线源码  http://androidxref.com/9.0.0_r3/xref/
58.00 唤醒
 MessageQueue 类里nativeWake(mPtr);
59.15 由局部变量nextPollTimeoutMillis 决定是否阻塞，为0不阻塞，为-1阻塞，为数值唤醒
nativePollOnce 方法会进行资源是否，避免卡死

01.05.30 代码运行（挂起操作）
 Message next() 里第一次int nextPollTimeoutMillis = 0; 所以for(;;) 里nativePollOnce 不会阻塞，走到nextPollTimeoutMillis = -1;
再到pendingIdleHandlerCount = mIdleHandlers.size(); 而mIdleHandlers是arrayList，看mIdleHandlers.add(handler); 是在addIdleHandler 调用了
addIdleHandler 在ActivityThread 里有调用到，第一次mIdleHandlers.size() 的值=0，走continue；
回到for(;;)后这时候nextPollTimeoutMillis=-1了，就会一直卡在nativePollOnce 方法里（挂起）
如果mIdleHandlers.size()大于0，会处理一块逻辑后，走到pendingIdleHandlerCount = 0; 和nextPollTimeoutMillis = 0; 重置为0
01.13.45 第二种情况
当Message msg = mMessages; 不为空会 msg = msg.next; 获取下一条消息，然后mMessages = msg.next; 把下一条赋值给全局变量
if (now < msg.when) 的when是Handler类 sendMessageAtTime 里的uptimeMillis ，执行完后还是到continue
01.26.20 没延时的情况
MessageQueue里 enqueMessage 里when<p.when满足，会执行mMessages = msg; 消息赋值给全局
01.31.20 唤醒操作
在Message next() 里355行 处理消息的时候mBlocked = false; 让新enqueueMessage的消息等待；闲置的时候386行 mBlocked = true;等待消息来处理
当enqueMessage 的时候调nativeWake(mPtr);
01.33.20 对象池
链表结构，最多放50条消息，Message类里void recycleUnchecked() 中sPoolSync 是指针，指向当前第一个Message， sPool是静态的Message，
next获取下一个Message
01.41.45
当when < p.when，调break; 退出，最终效果从小到大把Message排列完成
01.48.00
MessageQueue里 next()里 nativePollOnce 代码看不了，网页源码打不开
01.55.00
手写DnHandler



对象池队列，阻塞挂起，epoll，优先级队列




B站的解析
https://www.bilibili.com/video/BV1fv411B7bH?p=2&spm_id_from=pageDriver
Looper就像传送带的动力：
Looper.loop里 死循环调用了loopOnce，里面Message msg = me.mQueue.next();
而mQueue.next() 里从队列中取Message，拿到msg后调dipatchMessage，再调handleMessage

1 一个线程有几个Handler？
每个Activity都能new，随便new，想new多少new多少

2 一个线程有几个Looper？如何保证？
只有一个，
一个线程对应一个ThreadLocalMap，map里面的entry一个key对应一个value，key是threadlocal，value是传进来的looper
prepare方法里判断threadLocal不为空就抛出异常，保证了ThreadLocal的唯一性，也就是Entry里value的唯一
 源码解析：Looper.prepare()的时候有调用ThreadLocal.set()，里面Thread.currentThread()获取当前线程,
然后ThreadLocalMap map = getMap(t); 根据当前线程获取对应的用来保存线程上下文的ThreadLocalMap（一个线程对应一个map）
ThreadLocalMap里面是一个Entry[]数组，每一个Entry又是key，value结构的键值对，ThreadLocal是类似hashmap的结构



3 Handler内存泄漏的原因？为什么其他的内部类没有这个问题？
Handler使用的是匿名内部类，会持有activity的引用（jvm定的，是java语法）
enqueueMessage方法里msg.target = this; ，Message包含Handler，handler持有Activity
如果有delay的时间5min，那就要5min后才解除持有关系，MessageQueue又放在内存里
在5min内activity被onDestroy后，但MessageQueue还是持有activity就内存泄漏
解决办法：用静态handler，持有弱引用


4 为何主线程可以new Handler？如果要在子线程中new Handler要做些什么准备？
因为在ActivityThread里main里Looper.prepareMainLooper(); 已经初始化Looper了
要在子线程中new Handler，要先Looper.prepare();  当new 完Handler 后要Looper.loop();


5 子线程中维护的Looper，消息队列无消息的时候的处理方案是什么？有什么用？
阻塞： Looper类里 loop里 loopOnce里 queue.next()里 No more messages.的时候nextPollTimeoutMillis = -1;  然后continue到下一次循环
因为nextPollTimeoutMillis 是-1了，到nativePollOnce()就会阻塞，nativePollOnce会调用Linux函数，epoll机制进行等待
处理方案： 调用Looper.quit，removeAllMessagesLocked()把所以变量置为0或null，然后nativeWake(mPtr) 唤醒线程，
回到MessageQueue类，quit方法里mQuitting = true;  当next方法里的判断mQuitting是true就返回null  L374
然后Looper的loop里loopOnce里 Message msg = me.mQueue.next(); 中msg为null 返回false，回到loop就return
调threadhandler.looper.quit() 就释放线程了
A 主线程能够释放吗？为什么？
会报异常 Main thread not allowed to quit. 因为在ActivityThread类里handleMessage里有很多要处理的事件
比如BIND_SERVICE，UNBIND_SERVICE 四大组件生命周期，fragment等， 整个ActivityThread的功能都是在handleMessage里处理的


6 既然可以存在多个Handler往MessageQueue里添加数据，那它内部是如何确保线程安全的？
一个线程对应一个Looper，一个looper对应一个messageQueue，mQueue的next()，enqueueMessage和quit()都有加synchronized锁
来保证线程安全，synchronized (this) 中的this表示修饰的是messageQueue这个类，对这个进行同步锁保护
Looper类里mQueue是final变量，new出后就不能改了


7 使用message的时候应该如何创建？
obtain体现的就是享元设计模式
Message类 recycleUnchecked是把成员变量都设为0或null
Message类 obtain获取消息 Message m = sPool; sPool = m.next; 头插


























